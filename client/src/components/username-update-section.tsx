import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { UsernameInput } from "@/components/ui/username-input";
import { useToast } from "@/hooks/use-toast";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useAuth } from "@/hooks/use-auth";

export function UsernameUpdateSection() {
  const { user, setUser } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [newUsername, setNewUsername] = useState(user?.username || "");
  const [isEditing, setIsEditing] = useState(false);

  // Check if user has auto-generated username (contains underscore followed by numbers)
  const hasAutoGeneratedUsername = user?.username && /_\d+$/.test(user.username);

  const updateUsernameMutation = useMutation({
    mutationFn: async (username: string) => {
      const response = await apiRequest("PATCH", `/api/user/${user!.id}/username`, { username });
      return response.json();
    },
    onSuccess: (data) => {
      setUser({ ...user!, username: data.user.username });
      queryClient.invalidateQueries({ queryKey: ["/api/user"] });
      toast({
        title: "닉네임 변경 완료",
        description: "닉네임이 성공적으로 변경되었습니다.",
      });
      setIsEditing(false);
    },
    onError: (error: any) => {
      toast({
        title: "닉네임 변경 실패",
        description: error.message || "닉네임 변경 중 오류가 발생했습니다.",
        variant: "destructive",
      });
    },
  });

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (newUsername && newUsername !== user?.username) {
      updateUsernameMutation.mutate(newUsername);
    }
  };

  const handleCancel = () => {
    setNewUsername(user?.username || "");
    setIsEditing(false);
  };

  if (!user) return null;

  return (
    <Card className="bg-white shadow-sm">
      <CardHeader>
        <CardTitle className="text-lg font-semibold text-gray-900 korean-text">
          닉네임 설정
        </CardTitle>
        {hasAutoGeneratedUsername && (
          <p className="text-sm text-amber-600 korean-text">
            현재 자동 생성된 닉네임을 사용하고 있습니다. 원하는 닉네임으로 변경해보세요.
          </p>
        )}
      </CardHeader>
      <CardContent className="space-y-4">
        {!isEditing ? (
          <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
            <div>
              <p className="text-sm text-gray-600 korean-text">현재 닉네임</p>
              <p className="font-medium text-gray-900">{user.username}</p>
            </div>
            <Button
              variant="outline"
              onClick={() => setIsEditing(true)}
              className="korean-text"
            >
              변경하기
            </Button>
          </div>
        ) : (
          <form onSubmit={handleSubmit} className="space-y-4">
            <UsernameInput
              value={newUsername}
              onChange={setNewUsername}
              required
            />
            <div className="flex gap-2">
              <Button
                type="submit"
                disabled={updateUsernameMutation.isPending || newUsername === user.username}
                className="korean-text"
              >
                {updateUsernameMutation.isPending ? "변경 중..." : "변경하기"}
              </Button>
              <Button
                type="button"
                variant="outline"
                onClick={handleCancel}
                className="korean-text"
              >
                취소
              </Button>
            </div>
          </form>
        )}
      </CardContent>
    </Card>
  );
}